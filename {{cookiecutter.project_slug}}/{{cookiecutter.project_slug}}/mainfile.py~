# -*- coding: utf-8 -*-

import argparse
from sys import argv,exit
import math 
import argparse
import numpy as np
import sys
import os


class SmartFormatter(argparse.HelpFormatter):

        def _split_lines(self, text, width):
            # this is the RawTextHelpFormatter._split_lines
            if text.startswith('R|'):
                return text[2:].splitlines()  
            return argparse.HelpFormatter._split_lines(self, text, width)       
            
def main():
    """Console script for pyfp"""
    #
    # Parse command line arguments with argparse
    #    
    parser = argparse.ArgumentParser(formatter_class = SmartFormatter,
                                     description = 'Generate some reports from SAP output',
                                     usage = '%(prog)s [options]',
                                     epilog = "Example: (to be updated!!) run pdtime.py print -r R1 -n T3 -p year  sap2015.db")
    
    subparsers = parser.add_subparsers(help='Commands')

    # A read command
    read_parser = subparsers.add_parser('read', help='Excel2Pandas')
    read_parser.add_argument("ifile", action='store', help='Excel file')
    read_parser.add_argument("ofile", action='store', help='Pandas file')
    read_parser.add_argument('-t', action='store', help='Content in excel file (tj3-book, tj3-proj)')
    read_parser.set_defaults(command='read')

    # A find command
    find_parser = subparsers.add_parser('find', help='Find info')
    find_parser.add_argument("file", action='store', help='Data file containing Pandas objects')
    find_parser.add_argument('-o', default='all', action='store', help='Object to search')
    find_parser.add_argument('-c', default='all', action='store', help='Column to search')
    find_parser.add_argument('-s', default='None', action='store', help='Search string')
    find_parser.set_defaults(command='find')

    # A print command    
    print_parser = subparsers.add_parser('print', help='Print info')
    print_parser.add_argument("file", action='store', help='Data file containing Pandas objects')
    print_parser.add_argument('-r', action='store', help='Type of report (Rx,x=1...2)')
    print_parser.add_argument('-n', action='store', help='Name (name,all,T3,ret)')
    print_parser.add_argument('-p', action='store', help='Period (week, month, year)')
    print_parser.set_defaults(command='print')
    
    # An export command
    export_parser = subparsers.add_parser('export', help='Export to other formats')
    export_parser.add_argument("file", action='store', help='Data file containing Pandas objects')
    export_parser.add_argument('-i', action='store', help='Individual')
    export_parser.add_argument('-f', action='store', help='Output format (taskjuggler)')
    export_parser.add_argument('-p', action='store', help='Only export project if it is in the argument database')
    export_parser.set_defaults(command='export')
    
    # A batch command
    batch_parser = subparsers.add_parser('batch', help='Batch processing')
    batch_parser.add_argument("file", action='store', help='Data file containing commands')
    batch_parser.set_defaults(command='batch')
    
    args = parser.parse_args()

    #
    # ==========================
    # 
    #  R E A D
    #
    # ========================== 
    #

    if args.command == 'read':
        #
        # Read file with CADO, Z070RDSD and Z070RDPS from SAP
        #
        if args.t == 'tj3-book':
            infile = args.ifile
    
if __name__ == "__main__":
    main()

    
    